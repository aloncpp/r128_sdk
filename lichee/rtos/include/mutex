#ifndef STD_MUTEX_H
#define STD_MUTEX_H

#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <FreeRTOS.h>
#include <portmacro.h>
#include <FreeRTOSConfig.h>
#include <FreeRTOS.h>
#include <task.h>
#include <port_misc.h>
#include <queue.h>
#include <semphr.h>
#include <event_groups.h>

#include <tuple>
#include <chrono>
#include <exception>
#include <type_traits>
#include <system_error>

namespace std{

    /// Do not acquire ownership of the mutex.
    struct defer_lock_t { explicit defer_lock_t() = default; };

    /// Try to acquire ownership of the mutex without blocking.
    struct try_to_lock_t { explicit try_to_lock_t() = default; };

    /// Assume the calling thread has already obtained mutex ownership
    /// and manage it.
    struct adopt_lock_t { explicit adopt_lock_t() = default; };

    /// Tag used to prevent a scoped lock from acquiring ownership of a mutex.
    _GLIBCXX17_INLINE constexpr defer_lock_t	defer_lock { };

    /// Tag used to prevent a scoped lock from blocking if a mutex is locked.
    _GLIBCXX17_INLINE constexpr try_to_lock_t	try_to_lock { };

    /// Tag used to make a scoped lock take ownership of a locked mutex.
    _GLIBCXX17_INLINE constexpr adopt_lock_t	adopt_lock { };

    template<typename _Mutex>
    class lock_guard
    {
    public:
        typedef _Mutex mutex_type;

        explicit lock_guard(mutex_type& __m) : _M_device(__m)
        { _M_device.lock(); }

        ~lock_guard()
        { _M_device.unlock(); }

        lock_guard(const lock_guard&) = delete;
        lock_guard& operator=(const lock_guard&) = delete;

    private:
        mutex_type&  _M_device;
    };

    class mutex
    {
        public:
        typedef QueueHandle_t       __native_type;
        __native_type  _M_mutex;
        typedef __native_type*          native_handle_type;

        mutex()
        {
            _M_mutex = xSemaphoreCreateMutex();
        }

        ~mutex()
        {
            vSemaphoreDelete(_M_mutex);
        }

        mutex(const mutex&) = delete;
        mutex& operator=(const mutex&) = delete;

        void lock()
        {
            xSemaphoreTake(_M_mutex, portMAX_DELAY);
        }

        bool try_lock() noexcept
        {
            return xSemaphoreTake(_M_mutex, 0);
        }

        void unlock()
        {
            xSemaphoreGive(_M_mutex);
        }

        native_handle_type native_handle()
        {
            return &_M_mutex;
        }
    };

    /** @brief A movable scoped lock type.
    *
    * A unique_lock controls mutex ownership within a scope. Ownership of the
    * mutex can be delayed until after construction and can be transferred
    * to another unique_lock by move construction or move assignment. If a
    * mutex lock is owned when the destructor runs ownership will be released.
    */
    template<typename _Mutex>
    class unique_lock
    {
    public:
        typedef _Mutex mutex_type;

        unique_lock() noexcept : _M_device(0), _M_owns(false)
        { }

        explicit unique_lock(mutex_type& __m)
            : _M_device(std::__addressof(__m)), _M_owns(false)
        {
	        lock();
	        _M_owns = true;
        }

        unique_lock(mutex_type& __m, defer_lock_t) noexcept
            : _M_device(std::__addressof(__m)), _M_owns(false)
        { }

        unique_lock(mutex_type& __m, try_to_lock_t)
            : _M_device(std::__addressof(__m)), _M_owns(_M_device->try_lock())
        { }

        unique_lock(mutex_type& __m, adopt_lock_t) noexcept
            : _M_device(std::__addressof(__m)), _M_owns(true)
        {
    }

    template<typename _Clock, typename _Duration>
	unique_lock(mutex_type& __m, const chrono::time_point<_Clock, _Duration>& __atime)
	    : _M_device(std::__addressof(__m)),
	    _M_owns(_M_device->try_lock_until(__atime))
	{ }

    template<typename _Rep, typename _Period>
	unique_lock(mutex_type& __m,
		    const chrono::duration<_Rep, _Period>& __rtime)
	    : _M_device(std::__addressof(__m)),
	    _M_owns(_M_device->try_lock_for(__rtime))
	{ }

    ~unique_lock()
    {
	    if (_M_owns)
	        unlock();
        }

        unique_lock(const unique_lock&) = delete;
        unique_lock& operator=(const unique_lock&) = delete;

        unique_lock(unique_lock&& __u) noexcept
            : _M_device(__u._M_device), _M_owns(__u._M_owns)
        {
	    __u._M_device = 0;
	    __u._M_owns = false;
    }

    unique_lock& operator=(unique_lock&& __u) noexcept
    {
	    if(_M_owns)
	        unlock();

	    unique_lock(std::move(__u)).swap(*this);

	    __u._M_device = 0;
	    __u._M_owns = false;

	    return *this;
    }

    void lock()
    {
	    if (!_M_device)
	        __throw_system_error(int(errc::operation_not_permitted));
	    else if (_M_owns)
	        __throw_system_error(int(errc::resource_deadlock_would_occur));
	    else
	    {
	        _M_device->lock();
	        _M_owns = true;
	    }
    }

    bool try_lock()
    {
	    if (!_M_device)
	        __throw_system_error(int(errc::operation_not_permitted));
	    else if (_M_owns)
	        __throw_system_error(int(errc::resource_deadlock_would_occur));
	    else
	    {
	        _M_owns = _M_device->try_lock();
	        return _M_owns;
	    }
    }

    template<typename _Clock, typename _Duration>
	bool try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
	{
	    if (!_M_device)
	        __throw_system_error(int(errc::operation_not_permitted));
	    else if (_M_owns)
	        __throw_system_error(int(errc::resource_deadlock_would_occur));
	    else
	    {
	        _M_owns = _M_device->try_lock_until(__atime);
	        return _M_owns;
	    }
	}

    template<typename _Rep, typename _Period>
	bool try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
	{
	    if (!_M_device)
	        __throw_system_error(int(errc::operation_not_permitted));
	    else if (_M_owns)
	        __throw_system_error(int(errc::resource_deadlock_would_occur));
	    else
	    {
	      _M_owns = _M_device->try_lock_for(__rtime);
	      return _M_owns;
	    }
	 }

    void unlock()
    {
	    if (!_M_owns)
	        __throw_system_error(int(errc::operation_not_permitted));
	    else if (_M_device)
	    {
	        _M_device->unlock();
	        _M_owns = false;
	    }
    }

    void swap(unique_lock& __u) noexcept
    {
	    std::swap(_M_device, __u._M_device);
	    std::swap(_M_owns, __u._M_owns);
    }

    mutex_type* release() noexcept
    {
	    mutex_type* __ret = _M_device;
	    _M_device = 0;
	    _M_owns = false;
	    return __ret;
    }

    bool owns_lock() const noexcept
    {
        return _M_owns;
    }

    explicit operator bool() const noexcept
    {
        return owns_lock();
    }

    mutex_type* mutex() const noexcept
    {
        return _M_device;
    }

    private:
        mutex_type*	_M_device;
        bool		_M_owns; // XXX use atomic_bool
    };

    /// Swap overload for unique_lock objects.
    template<typename _Mutex>
    inline void swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>& __y) noexcept
    {
        __x.swap(__y);
    }

}
#endif /* STD_MUTEX_H*/
