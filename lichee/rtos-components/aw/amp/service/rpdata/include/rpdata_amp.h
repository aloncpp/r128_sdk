/*
* Copyright (c) 2019-2025 Allwinner Technology Co., Ltd. ALL rights reserved.
*
* Allwinner is a trademark of Allwinner Technology Co.,Ltd., registered in
* the the people's Republic of China and other countries.
* All Allwinner Technology Co.,Ltd. trademarks are used with permission.
*
* DISCLAIMER
* THIRD PARTY LICENCES MAY BE REQUIRED TO IMPLEMENT THE SOLUTION/PRODUCT.
* IF YOU NEED TO INTEGRATE THIRD PARTY’S TECHNOLOGY (SONY, DTS, DOLBY, AVS OR MPEGLA, ETC.)
* IN ALLWINNERS’SDK OR PRODUCTS, YOU SHALL BE SOLELY RESPONSIBLE TO OBTAIN
* ALL APPROPRIATELY REQUIRED THIRD PARTY LICENCES.
* ALLWINNER SHALL HAVE NO WARRANTY, INDEMNITY OR OTHER OBLIGATIONS WITH RESPECT TO MATTERS
* COVERED UNDER ANY REQUIRED THIRD PARTY LICENSE.
* YOU ARE SOLELY RESPONSIBLE FOR YOUR USAGE OF THIRD PARTY’S TECHNOLOGY.
*
*
* THIS SOFTWARE IS PROVIDED BY ALLWINNER"AS IS" AND TO THE MAXIMUM EXTENT
* PERMITTED BY LAW, ALLWINNER EXPRESSLY DISCLAIMS ALL WARRANTIES OF ANY KIND,
* WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING WITHOUT LIMITATION REGARDING
* THE TITLE, NON-INFRINGEMENT, ACCURACY, CONDITION, COMPLETENESS, PERFORMANCE
* OR MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
* IN NO EVENT SHALL ALLWINNER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS, OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#ifndef __RPDATA_AMP_H
#define __RPSATA_AMP_H

#include <stdint.h>


/*
 * bit_range	means	bit_width	value
 *   [0:5],	id	6		0~63
 *  [6:11],	type	6		0~63
 * [12:17],	ioctl	6		0~63
 *    [18],	in	1		0~1
 *    [19],	out	1		0~1
 * [20:21],	s_dir	2		0~3
 * [22~31],	magic   10		0x76C constant
 *
 */

#define RPDATA_AMP_OFFSET_INSTANCE	(0)
#define RPDATA_AMP_OFFSET_ID		(0)
#define RPDATA_AMP_OFFSET_TYPE		(6)
#define RPDATA_AMP_OFFSET_IOCTL		(12)
#define RPDATA_AMP_OFFSET_IN		(18)
#define RPDATA_AMP_OFFSET_OUT		(19)
#define RPDATA_AMP_OFFSET_SDIR		(20)
#define RPDATA_AMP_OFFSET_MAGIC		(22)

#define RPDATA_AMP_MASK_INSTANCE	(0xfff)
#define RPDATA_AMP_MASK_ID		(0x3f)
#define RPDATA_AMP_MASK_TYPE		(0x3f)
#define RPDATA_AMP_MASK_IOCTL		(0x3f)
#define RPDATA_AMP_MASK_IN		(0x01)
#define RPDATA_AMP_MASK_OUT		(0x01)
#define RPDATA_AMP_MASK_SDIR		(0x03)
#define RPDATA_AMP_MASK_MAGIC		(0x3ff)

#define RPDATA_AMP_INSTANCE(ins)	((ins & RPDATA_AMP_MASK_INSTANCE) << RPDATA_AMP_OFFSET_INSTANCE)
#define RPDATA_AMP_IOCTL(i)		((i & RPDATA_AMP_MASK_IOCTL) << RPDATA_AMP_OFFSET_IOCTL)
#define RPDATA_AMP_IN			(0x1 << RPDATA_AMP_OFFSET_IN)
#define RPDATA_AMP_OUT			(0x1 << RPDATA_AMP_OFFSET_OUT)
#define RPDATA_AMP_SDIR(dir)		((dir) << RPDATA_AMP_OFFSET_SDIR)
#define RPDATA_AMP_MAGIC		((0x76C >> 2) << RPDATA_AMP_OFFSET_MAGIC)

#define RPDATA_AMP_INS_VAL(type, id)	(((type & RPDATA_AMP_MASK_TYPE) << RPDATA_AMP_OFFSET_TYPE) \
					| ((id & RPDATA_AMP_MASK_ID) << RPDATA_AMP_OFFSET_ID))


#define RPDATA_AMP_INSTANCE_MASK(cmd)	(cmd & (RPDATA_AMP_MASK_INSTANCE << RPDATA_AMP_OFFSET_INSTANCE))
#define RPDATA_AMP_IOCTL_MASK(cmd)	(cmd & (RPDATA_AMP_MASK_IOCTL << RPDATA_AMP_OFFSET_IOCTL))
#define RPDATA_AMP_MAGIC_MASK(cmd)	(cmd & (RPDATA_AMP_MASK_MAGIC << RPDATA_AMP_OFFSET_MAGIC))

#define RPDATA_AMP_INSTANCE_TO_TYPE(ins)	((ins >> RPDATA_AMP_OFFSET_TYPE) & RPDATA_AMP_MASK_TYPE)
#define RPDATA_AMP_INSTANCE_TO_ID(ins)		((ins >> RPDATA_AMP_OFFSET_ID) & RPDATA_AMP_MASK_ID)
#define RPDATA_AMP_CMD_TO_SDIR(cmd)	((cmd >> RPDATA_AMP_OFFSET_SDIR) & RPDATA_AMP_MASK_SDIR)

/* master start */
#define RPDATA_IOCTL_NOTIFY		(RPDATA_AMP_IOCTL(0x01))
#define RPDATA_IOCTL_WAIT_DESTROY	(RPDATA_AMP_IOCTL(0x02))
/* slave start */
#define RPDATA_IOCTL_CON_ACK		(RPDATA_AMP_IOCTL(0x10))
#define RPDATA_IOCTL_NOTIFY_DESTROY	(RPDATA_AMP_IOCTL(0x11))
/* master*slave start */
#define RPDATA_IOCTL_SEND	(RPDATA_AMP_IOCTL(0x20))
#define RPDATA_IOCTL_PROCESS	(RPDATA_AMP_IOCTL(0x21))


int rpdata_ioctl(int dir, int cmd, void *data, uint32_t len);



#endif /* __RPDATA_AMP_H */
